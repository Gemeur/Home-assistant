blueprint:
  name: "IKEA Styrbar Control: Refined Dimming, Temp & 9-Color Cycle"
  description: "Advanced control for IKEA Styrbar (Zigbee2MQTT). Features min/max brightness limiting, smooth continuous dimming/temp control, and a graphical 9-color cycle for multiple entities."
  domain: automation
  source_url: https://github.com/Gemeur/Home-assistant/blob/main/automation/ikea_styrbar_control.yaml

  input:
    # --- Core Devices & Helpers ---
    switch_remote:
      name: Styrbar Switch Remote
      description: Choose IKEA Styrbar switch remote device
      selector:
        device:
          integration: mqtt
          manufacturer: IKEA
          model: STYRBAR remote control
          multiple: false

    targets:
      name: Light/Switch Entities
      description: Choose one or more Light/Switch Entities you want to control
      selector:
        entity:
          filter:
            - domain:
                - light
                - switch
          multiple: true

    color_cycle_index:
      name: Color Cycle Index Helper (input_number)
      description: Choose the Input Number Helper to store the color cycle index (0..N)
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - input_number

    # --- Hold Actions (Restored) ---
    arrow_left_hold:
      name: Left Arrow Hold (Action on release)
      description: Action to execute when the Left button is released after a hold.
      default: []
      selector:
        action: {}

    arrow_right_hold:
      name: Right Arrow Hold (Action on release)
      description: Action to execute when the Right button is released after a hold.
      default: []
      selector:
        action: {}

    # --- Color & Brightness Limits ---
    min_brightness_pct:
      name: Minimum Brightness (%)
      description: The minimum brightness level (in percent) when dimming down.
      default: 1
      selector:
        number:
          min: 1
          max: 100
          step: 1
          mode: slider
          
    max_brightness_pct:
      name: Maximum Brightness (%)
      description: The maximum brightness level (in percent) when dimming up.
      default: 100
      selector:
        number:
          min: 1
          max: 100
          step: 1
          mode: slider
          
    min_color_temp_kelvin:
      name: Minimum Color Temperature (Kelvin - Warmer)
      description: The warmest color temperature limit (e.g., 2000K).
      default: 2000
      selector:
        number:
          min: 1000
          max: 6500
          step: 100
          mode: slider

    max_color_temp_kelvin:
      name: Maximum Color Temperature (Kelvin - Cooler)
      description: The coolest color temperature limit (e.g., 6500K).
      default: 4700
      selector:
        number:
          min: 1000
          max: 6500
          step: 100
          mode: slider

    # --- Color Cycle List (Graphical Selectors, Renamed & Default Colors Updated) ---
    color_0:
      name: Color 0 (Default White)
      description: The first color in the cycle (Index 0). Best for a default White/Temp.
      default: 
        - 255
        - 255
        - 255 # #ffffff
      selector:
        color_rgb:
    color_1:
      name: Color 1
      description: The second color in the cycle.
      default: 
        - 255
        - 255
        - 0 # #ffff00
      selector:
        color_rgb:
    color_2:
      name: Color 2
      description: The third color in the cycle.
      default: 
        - 255
        - 165
        - 0 # #ffa500
      selector:
        color_rgb:
    color_3:
      name: Color 3
      description: The fourth color in the cycle.
      default: 
        - 255
        - 0
        - 0 # #ff0000
      selector:
        color_rgb:
    color_4:
      name: Color 4
      description: The fifth color in the cycle.
      default: 
        - 255
        - 0
        - 123 # #ff007b
      selector:
        color_rgb:
    color_5:
      name: Color 5
      description: The sixth color in the cycle.
      default: 
        - 153
        - 0
        - 255 # #9900ff
      selector:
        color_rgb:
    color_6:
      name: Color 6
      description: The seventh color in the cycle.
      default: 
        - 0
        - 30
        - 255 # #001eff
      selector:
        color_rgb:
    color_7:
      name: Color 7
      description: The eighth color in the cycle.
      default: 
        - 0
        - 85
        - 128 # #005580
      selector:
        color_rgb:
    color_8:
      name: Color 8
      description: The ninth color in the cycle.
      default: 
        - 0
        - 255
        - 42 # #00ff2a
      selector:
        color_rgb:
          
    # --- Timing & Step Settings (Updated Defaults) ---
    repeat_delay:
      name: Delay for brightness step (ms)
      description: Delay between brightness change steps (e.g., 50-200ms recommended).
      selector:
        number:
          min: 20
          max: 1000
          step: 10
          mode: slider
      default: 50

    brightness_step_pct:
      name: Brightness Level step for each iteration (%)
      description: Step size for smooth brightness change (in percent).
      selector:
        number:
          min: 1
          max: 100
          step: 1
          mode: slider
      default: 20
      
    color_temp_delay_input:
      name: Delay for color temp step (ms)
      description: Delay between color temperature change steps.
      selector:
        number:
          min: 20
          max: 1000
          step: 10
          mode: slider
      default: 70

    color_temp_step_kelvin_input:
      name: Color Temperature step (Kelvin)
      description: Step size for smooth color temperature change (in Kelvin).
      selector:
        number:
          min: 10
          max: 500
          step: 10
          mode: slider
      default: 250

mode: restart

trigger:
  - id: 'on'
    platform: device
    device_id: !input switch_remote
    domain: mqtt
    type: action
    subtype: 'on'
  - id: 'off'
    platform: device
    device_id: !input switch_remote
    domain: mqtt
    type: action
    subtype: 'off'
  - id: brightness_move_up
    platform: device
    device_id: !input switch_remote
    domain: mqtt
    type: action
    subtype: brightness_move_up
  - id: brightness_move_down
    platform: device
    device_id: !input switch_remote
    domain: mqtt
    type: action
    subtype: brightness_move_down
  - id: brightness_stop
    platform: device
    device_id: !input switch_remote
    domain: mqtt
    type: action
    subtype: brightness_stop
  - id: arrow_left_click
    platform: device
    device_id: !input switch_remote
    domain: mqtt
    type: action
    subtype: arrow_left_click
  - id: arrow_left_hold
    platform: device
    device_id: !input switch_remote
    domain: mqtt
    type: action
    subtype: arrow_left_hold
  - id: arrow_left_release
    platform: device
    device_id: !input switch_remote
    domain: mqtt
    type: action
    subtype: arrow_left_release
  - id: arrow_right_click
    platform: device
    device_id: !input switch_remote
    domain: mqtt
    type: action
    subtype: arrow_right_click
  - id: arrow_right_hold
    platform: device
    device_id: !input switch_remote
    domain: mqtt
    type: action
    subtype: arrow_right_hold
  - id: arrow_right_release
    platform: device
    device_id: !input switch_remote
    domain: mqtt
    type: action
    subtype: arrow_right_release

action:
  - variables:
      target_entities: !input targets
      lights: >
        {{ expand(target_entities) | map(attribute='entity_id') | select('match', '^light\\.') |
          list }}
      switches: >
        {{ expand(target_entities) |
          map(attribute='entity_id') | select('match', '^switch\\.') | list }}
          
      # Brightness
      repeat_delay: !input repeat_delay
      brightness_step_pct: !input brightness_step_pct
      min_brightness_pct: !input min_brightness_pct
      max_brightness_pct: !input max_brightness_pct
      
      # Temperature
      color_temp_delay: !input color_temp_delay_input
      color_temp_step_kelvin: !input color_temp_step_kelvin_input
      color_temp_min_kelvin: !input min_color_temp_kelvin
      color_temp_max_kelvin: !input max_color_temp_kelvin
      
      # Colors
      color_list:
        - rgb_color: !input color_0
        - rgb_color: !input color_1
        - rgb_color: !input color_2
        - rgb_color: !input color_3
        - rgb_color: !input color_4
        - rgb_color: !input color_5
        - rgb_color: !input color_6
        - rgb_color: !input color_7
        - rgb_color: !input color_8
      color_list_len: "{{ color_list | count }}"
      color_index_helper: !input color_cycle_index

  - choose:
      # --- On/Off ---
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'on' }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ lights | count > 0 }}"
            then:
              - service: light.turn_on
                target:
                  entity_id: "{{ lights }}"
                data:
                  brightness_pct: "{{ max_brightness_pct }}"
            else:
              - service: switch.turn_on
                target:
                  entity_id: "{{ switches }}"

      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'off' }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ lights | count > 0 }}"
            then:
              - service: light.turn_off
                target:
                  entity_id: "{{ lights }}"
            else:
              - service: switch.turn_off
                target:
                  entity_id: "{{ switches }}"

      # --- Hold for Brightness UP (FIXED) ---
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'brightness_move_up' }}"
        sequence:
          - repeat:
              until:
                - condition: trigger
                  id: brightness_stop
                - condition: template
                  value_template: >
                    {% set cur_pct = (state_attr(lights[0], 'brightness') | default(0) | float(0)) / 2.55 %}
                    {{ cur_pct >= max_brightness_pct }}
              sequence:
                - variables:
                    current_pct: >
                      {% set cur_br = state_attr(lights[0], 'brightness') | default((min_brightness_pct * 2.55) | int(0)) | float(0) %}
                      {{ (cur_br / 2.55) | round(0) }}
                    new_pct: >
                      {% set val = current_pct + brightness_step_pct %}
                      {{ [val, max_brightness_pct] | min }}
                - service: light.turn_on
                  target:
                    entity_id: "{{ lights }}"
                  data:
                    brightness_pct: "{{ new_pct | int }}"
                - delay:
                    milliseconds: "{{ repeat_delay }}"

      # --- Hold for Brightness DOWN (FIXED) ---
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'brightness_move_down' }}"
        sequence:
          - repeat:
              until:
                - condition: trigger
                  id: brightness_stop
                - condition: template
                  value_template: >
                    {% set cur_pct = (state_attr(lights[0], 'brightness') | default(255) | float(255)) / 2.55 %}
                    {{ cur_pct <= min_brightness_pct }}
              sequence:
                - variables:
                    current_pct: >
                      {% set cur_br = state_attr(lights[0], 'brightness') | default((max_brightness_pct * 2.55) | int(255)) | float(255) %}
                      {{ (cur_br / 2.55) | round(0) }}
                    new_pct: >
                      {% set val = current_pct - brightness_step_pct %}
                      {{ [val, min_brightness_pct] | max }}
                - service: light.turn_on
                  target:
                    entity_id: "{{ lights }}"
                  data:
                    brightness_pct: "{{ new_pct | int }}"
                - delay:
                    milliseconds: "{{ repeat_delay }}"

      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'brightness_stop' }}"
        sequence: []

      # --- Short press → (Color Cycle +1) ---
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'arrow_right_click' }}"
        sequence:
          - variables:
              current_index: "{{ states(color_index_helper) | int(0) }}"
              # OPTIMIZATION: Dynamic cycle based on list length
              new_index: >
                {% if current_index >= (color_list_len - 1) %}
                  {{ 0 }} 
                {% else %}
                  {{ current_index + 1 }}
                {% endif %}
          - service: input_number.set_value
            data:
              value: "{{ new_index }}"
            target:
              entity_id: "{{ color_index_helper }}"
          - service: light.turn_on
            target:
              entity_id: "{{ lights }}"
            data: >
              {% set color_data = color_list[new_index] %}
              {% set light_data = {} %}
              {# We only support rgb_color now, since we use the color_rgb selector #}
              {% if color_data.rgb_color is defined %}
                {% set light_data = light_data | combine({'rgb_color': color_data.rgb_color}) %}
              {% endif %}
              {{ light_data }}

      # --- Short press ← (Color Cycle -1) ---
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'arrow_left_click' }}"
        sequence:
          - variables:
              current_index: "{{ states(color_index_helper) | int(0) }}"
              # OPTIMIZATION: Dynamic cycle based on list length
              new_index: >
                {% if current_index == 0 %}
                  {{ color_list_len - 1 }} 
                {% else %}
                  {{ current_index - 1 }}
                {% endif %}
          - service: input_number.set_value
            data:
              value: "{{ new_index }}"
            target:
              entity_id: "{{ color_index_helper }}"
          - service: light.turn_on
            target:
              entity_id: "{{ lights }}"
            data: >
              {% set color_data = color_list[new_index] %}
              {% set light_data = {} %}
              {# We only support rgb_color now, since we use the color_rgb selector #}
              {% if color_data.rgb_color is defined %}
                {% set light_data = light_data | combine({'rgb_color': color_data.rgb_color}) %}
              {% endif %}
              {{ light_data }}

      # --- Hold ← (Cooler / Increase Kelvin) ---
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'arrow_left_hold' }}"
        sequence:
          - if:
              - condition: template
                value_template: >
                  {{ lights | count > 0 and state_attr(lights[0], 'color_mode') in ['hs', 'xy'] }}
            then:
              - service: light.turn_on
                target:
                  entity_id: "{{ lights }}"
                data:
                  color_mode: color_temp
          - repeat:
              until:
                - condition: trigger
                  id: arrow_left_release
                # OPTIMIZATION: Stop if max (coolest) temp is reached
                - condition: template
                  value_template: >
                    {% set cur_temp = state_attr(lights[0], 'color_temp_kelvin') | int(color_temp_min_kelvin) %}
                    {{ cur_temp >= color_temp_max_kelvin }}
              sequence:
                - variables:
                    cur_temp: "{{ state_attr(lights[0], 'color_temp_kelvin') | int(color_temp_min_kelvin) }}"
                    new_temp: >
                      {% set val = cur_temp + color_temp_step_kelvin %}
                      {{ [val, color_temp_max_kelvin] | min }}
                - service: light.turn_on
                  target:
                    entity_id: "{{ lights }}"
                  data:
                    color_temp_kelvin: "{{ new_temp | int }}"
                - delay:
                    milliseconds: "{{ color_temp_delay }}"
          - sequence: !input arrow_left_hold

      # --- Hold → (Warmer / Decrease Kelvin) ---
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'arrow_right_hold' }}"
        sequence:
          - if:
              - condition: template
                value_template: >
                  {{ lights | count > 0 and state_attr(lights[0], 'color_mode') in ['hs', 'xy'] }}
            then:
              - service: light.turn_on
                target:
                  entity_id: "{{ lights }}"
                data:
                  color_mode: color_temp
          - repeat:
              until:
                - condition: trigger
                  id: arrow_right_release
                # OPTIMIZATION: Stop if min (warmest) temp is reached
                - condition: template
                  value_template: >
                    {% set cur_temp = state_attr(lights[0], 'color_temp_kelvin') | int(color_temp_max_kelvin) %}
                    {{ cur_temp <= color_temp_min_kelvin }}
              sequence:
                - variables:
                    cur_temp: "{{ state_attr(lights[0], 'color_temp_kelvin') | int(color_temp_max_kelvin) }}"
                    new_temp: >
                      {% set val = cur_temp - color_temp_step_kelvin %}
                      {{ [val, color_temp_min_kelvin] | max }}
                - service: light.turn_on
                  target:
                    entity_id: "{{ lights }}"
                  data:
                    color_temp_kelvin: "{{ new_temp | int }}"
                - delay:
                    milliseconds: "{{ color_temp_delay }}"
          - sequence: !input arrow_right_hold
